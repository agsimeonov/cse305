		   	CSE 305 Spring 2011
		Assignment #2: Interactive Program Verifier	
			Date Assigned: Feb 17
		     Date Due: March 3 (11:59:59 PM) 

Overall Objective:
Write a Prolog program that will interactively assist a user to prove 
the partial correctness of simple procedural programs, by generating 
the necessary verification conditions using the "Weakest Preconditions" 
method discussed in the lectures.  

An EBNF definition of the language is given below:

	program ::= input bexpr
		    output bexpr
		    program cmpdstmt .
	cmpdstmt ::= '{' { stmt; } '}'
	stmt ::= assign  | ifthenelse | whiledo
	assign ::= var = expr
	ifthenelse ::= if (bexpr) cmpdstmt 
	ifthenelse ::= if (bexpr) cmpdstmt else cmpdstmt
	whiledo ::= while (bexpr) cmpdstmt

The grammar for expr makes use of +, -, *, /, (, ), identifiers and numbers.  
The grammar for bexpr makes use the relational operators (=, =<, >=, <, >),
'not', and 'and'.  DCGs for both grammars are given to you.

Program Organization: The top-level driver is as follows:

	verify(Filename) :-   
		open(Filename,read,Stream),
		lex(Stream,Tokens),
		parse(Tokens,Triple), 		% Hoare Triple: {P} S {Q} 
		prove(Triple),
		close(Stream).

The program is organized in three files:
	1. lex -- the lexical analyzer (will be given to you fully)
	2. parse -- definite clause grammar (you need to write the grammar
		    rules for statements; expression rules are given to you)
	3. prove -- the interactive prover (you need to write the rules
		    for the wp predicate; everything else is given)

See http://www.cse.buffalo.edu/LRG/CSE305/Prolog/Prover for the files.

The prover generates verification conditions one at a time and asks the user 
to verify each condition before generating the next condition---this is why 
it is called an interactive prover.  For each while-do construct in the 
input program, the prover asks the user to supply the "loop invariant". 

Partial correctness is said to be verified if all the verification conditions 
generated by the prover are verifiable by the user.  See sample session
at the end of the assignment.

What to Submit:  The files parse and prove using the submit_cse305 command.

How to go about the Assignment:

(1) Write a definite clause grammar (DCG) for the constructs of the language.
(2) Augment the DCG with attributes so that a parse tree is constructed
    for the toplevel 'cmpdstmt' and a Hoare triple is returned for 'program',
(3) Write the definition for the predicate prove(Triple) in terms of  
    a predicate wp(Pre, S, Post), which computes in Pre the weakest 
    precondition necessary to establish Post as the postcondition for S.  
    The definition of wp is very systematic, in that there will be one
    rule for each type of statement in the language.

Further details will be communicated in the recitations.

Suppose the following program is in file 'fact':

	input  n >= 0
	output f = fact(n)
	program { i = 1; 
		  f = 1;
		  while (i =< n) {
		     f = f * i; 
		     i = i + 1;
		  };
		}.

Here's a sample session using the prover:

	| ?- [lex, parse, prove].
	.. load in these files ...
	| ?- verify(fact).

	Enter loop invariant for: while (i=<n) {f=f*i;i=i+1}

	|: f=fact(i-1) and (i=<n+1).

	Is the following true? 

	   i=<n and 
	   f=fact(i-1)and(i=<n+1)
	   -->
	      f*i=fact(i)and(i=<n)

	Enter true./false.: |: true.

	Is the following true? 

	   i>=n+1 and 
	   f=fact(i-1)and(i=<n+1)
	   -->
	      f=fact(n)

	Enter true./false.: |: true.

	Is the following true? 

	   n>=0
	   -->
	      1=fact(0)and(0=<n)

	Enter true./false.: |: true.

	The program is verified for partial correctness!

	yes
	| ?-
			End of Assignment #2
